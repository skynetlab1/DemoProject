
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_kubernetes_cluster.privateaks[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "privateaks" {
      [32m+[0m[0m api_server_authorized_ip_ranges     = (known after apply)
      [32m+[0m[0m current_kubernetes_version          = (known after apply)
      [32m+[0m[0m dns_prefix                          = "private-aks"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m http_application_routing_zone_name  = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m image_cleaner_enabled               = false
      [32m+[0m[0m image_cleaner_interval_hours        = 48
      [32m+[0m[0m kube_admin_config                   = (sensitive value)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (sensitive value)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = (known after apply)
      [32m+[0m[0m location                            = "westeurope"
      [32m+[0m[0m name                                = "private-aks"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m node_resource_group_id              = (known after apply)
      [32m+[0m[0m oidc_issuer_url                     = (known after apply)
      [32m+[0m[0m portal_fqdn                         = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = true
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m public_network_access_enabled       = true
      [32m+[0m[0m resource_group_name                 = "nopublicipaks"
      [32m+[0m[0m role_based_access_control_enabled   = true
      [32m+[0m[0m run_command_enabled                 = true
      [32m+[0m[0m sku_tier                            = "Free"
      [32m+[0m[0m support_plan                        = "KubernetesOfficial"
      [32m+[0m[0m workload_identity_enabled           = false

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "default"
          [32m+[0m[0m node_count           = 1
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = (known after apply)
          [32m+[0m[0m scale_down_mode      = "Delete"
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_D2_v2"
          [32m+[0m[0m vnet_subnet_id       = (known after apply)
          [32m+[0m[0m workload_runtime     = (known after apply)
        }

      [32m+[0m[0m identity {
          [32m+[0m[0m principal_id = (known after apply)
          [32m+[0m[0m tenant_id    = (known after apply)
          [32m+[0m[0m type         = "SystemAssigned"
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip          = "10.2.0.10"
          [32m+[0m[0m docker_bridge_cidr      = (known after apply)
          [32m+[0m[0m ebpf_data_plane         = (known after apply)
          [32m+[0m[0m ip_versions             = (known after apply)
          [32m+[0m[0m load_balancer_sku       = "standard"
          [32m+[0m[0m network_data_plane      = (known after apply)
          [32m+[0m[0m network_mode            = (known after apply)
          [32m+[0m[0m network_plugin          = "azure"
          [32m+[0m[0m network_policy          = (known after apply)
          [32m+[0m[0m outbound_ip_address_ids = (known after apply)
          [32m+[0m[0m outbound_ip_prefix_ids  = (known after apply)
          [32m+[0m[0m outbound_type           = "userDefinedRouting"
          [32m+[0m[0m pod_cidr                = "172.17.0.1/16"
          [32m+[0m[0m pod_cidrs               = (known after apply)
          [32m+[0m[0m service_cidr            = "10.2.0.0/24"
          [32m+[0m[0m service_cidrs           = (known after apply)
        }
    }

[1m  # azurerm_resource_group.kube[0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "kube" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "westeurope"
      [32m+[0m[0m name     = "nopublicipaks"
    }

[1m  # azurerm_resource_group.vnet[0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "vnet" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "westeurope"
      [32m+[0m[0m name     = "networks"
    }

[1m  # azurerm_role_assignment.netcontributor[0m will be created
[0m  [32m+[0m[0m resource "azurerm_role_assignment" "netcontributor" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m name                             = (known after apply)
      [32m+[0m[0m principal_id                     = (known after apply)
      [32m+[0m[0m principal_type                   = (known after apply)
      [32m+[0m[0m role_definition_id               = (known after apply)
      [32m+[0m[0m role_definition_name             = "Network Contributor"
      [32m+[0m[0m scope                            = (known after apply)
      [32m+[0m[0m skip_service_principal_aad_check = (known after apply)
    }

[1m  # module.firewall.azurerm_firewall.fw[0m will be created
[0m  [32m+[0m[0m resource "azurerm_firewall" "fw" {
      [32m+[0m[0m dns_proxy_enabled   = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m location            = "westeurope"
      [32m+[0m[0m name                = "kubenetfw"
      [32m+[0m[0m resource_group_name = "networks"
      [32m+[0m[0m sku_name            = "AZFW_VNet"
      [32m+[0m[0m sku_tier            = "Standard"
      [32m+[0m[0m threat_intel_mode   = (known after apply)

      [32m+[0m[0m ip_configuration {
          [32m+[0m[0m name                 = "fw_ip_config"
          [32m+[0m[0m private_ip_address   = (known after apply)
          [32m+[0m[0m public_ip_address_id = (known after apply)
          [32m+[0m[0m subnet_id            = (known after apply)
        }
    }

[1m  # module.firewall.azurerm_firewall_application_rule_collection.aksbasics[0m will be created
[0m  [32m+[0m[0m resource "azurerm_firewall_application_rule_collection" "aksbasics" {
      [32m+[0m[0m action              = "Allow"
      [32m+[0m[0m azure_firewall_name = "kubenetfw"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "aksbasics"
      [32m+[0m[0m priority            = 101
      [32m+[0m[0m resource_group_name = "networks"

      [32m+[0m[0m rule {
          [32m+[0m[0m name             = "allow network"
          [32m+[0m[0m source_addresses = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m target_fqdns     = [
              [32m+[0m[0m "*.cdn.mscr.io",
              [32m+[0m[0m "mcr.microsoft.com",
              [32m+[0m[0m "*.data.mcr.microsoft.com",
              [32m+[0m[0m "management.azure.com",
              [32m+[0m[0m "login.microsoftonline.com",
              [32m+[0m[0m "acs-mirror.azureedge.net",
              [32m+[0m[0m "dc.services.visualstudio.com",
              [32m+[0m[0m "*.opinsights.azure.com",
              [32m+[0m[0m "*.oms.opinsights.azure.com",
              [32m+[0m[0m "*.microsoftonline.com",
              [32m+[0m[0m "*.monitoring.azure.com",
            ]

          [32m+[0m[0m protocol {
              [32m+[0m[0m port = 80
              [32m+[0m[0m type = "Http"
            }
          [32m+[0m[0m protocol {
              [32m+[0m[0m port = 443
              [32m+[0m[0m type = "Https"
            }
        }
    }

[1m  # module.firewall.azurerm_firewall_application_rule_collection.osupdates[0m will be created
[0m  [32m+[0m[0m resource "azurerm_firewall_application_rule_collection" "osupdates" {
      [32m+[0m[0m action              = "Allow"
      [32m+[0m[0m azure_firewall_name = "kubenetfw"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "osupdates"
      [32m+[0m[0m priority            = 102
      [32m+[0m[0m resource_group_name = "networks"

      [32m+[0m[0m rule {
          [32m+[0m[0m name             = "allow network"
          [32m+[0m[0m source_addresses = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m target_fqdns     = [
              [32m+[0m[0m "download.opensuse.org",
              [32m+[0m[0m "security.ubuntu.com",
              [32m+[0m[0m "ntp.ubuntu.com",
              [32m+[0m[0m "packages.microsoft.com",
              [32m+[0m[0m "snapcraft.io",
            ]

          [32m+[0m[0m protocol {
              [32m+[0m[0m port = 80
              [32m+[0m[0m type = "Http"
            }
          [32m+[0m[0m protocol {
              [32m+[0m[0m port = 443
              [32m+[0m[0m type = "Https"
            }
        }
    }

[1m  # module.firewall.azurerm_firewall_application_rule_collection.publicimages[0m will be created
[0m  [32m+[0m[0m resource "azurerm_firewall_application_rule_collection" "publicimages" {
      [32m+[0m[0m action              = "Allow"
      [32m+[0m[0m azure_firewall_name = "kubenetfw"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "publicimages"
      [32m+[0m[0m priority            = 103
      [32m+[0m[0m resource_group_name = "networks"

      [32m+[0m[0m rule {
          [32m+[0m[0m name             = "allow network"
          [32m+[0m[0m source_addresses = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m target_fqdns     = [
              [32m+[0m[0m "auth.docker.io",
              [32m+[0m[0m "registry-1.docker.io",
              [32m+[0m[0m "production.cloudflare.docker.com",
            ]

          [32m+[0m[0m protocol {
              [32m+[0m[0m port = 80
              [32m+[0m[0m type = "Http"
            }
          [32m+[0m[0m protocol {
              [32m+[0m[0m port = 443
              [32m+[0m[0m type = "Https"
            }
        }
    }

[1m  # module.firewall.azurerm_firewall_application_rule_collection.test[0m will be created
[0m  [32m+[0m[0m resource "azurerm_firewall_application_rule_collection" "test" {
      [32m+[0m[0m action              = "Allow"
      [32m+[0m[0m azure_firewall_name = "kubenetfw"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "test"
      [32m+[0m[0m priority            = 104
      [32m+[0m[0m resource_group_name = "networks"

      [32m+[0m[0m rule {
          [32m+[0m[0m name             = "allow network"
          [32m+[0m[0m source_addresses = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m target_fqdns     = [
              [32m+[0m[0m "*.bing.com",
            ]

          [32m+[0m[0m protocol {
              [32m+[0m[0m port = 80
              [32m+[0m[0m type = "Http"
            }
          [32m+[0m[0m protocol {
              [32m+[0m[0m port = 443
              [32m+[0m[0m type = "Https"
            }
        }
    }

[1m  # module.firewall.azurerm_firewall_network_rule_collection.dns[0m will be created
[0m  [32m+[0m[0m resource "azurerm_firewall_network_rule_collection" "dns" {
      [32m+[0m[0m action              = "Allow"
      [32m+[0m[0m azure_firewall_name = "kubenetfw"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "dns"
      [32m+[0m[0m priority            = 102
      [32m+[0m[0m resource_group_name = "networks"

      [32m+[0m[0m rule {
          [32m+[0m[0m description           = "aks node dns rule"
          [32m+[0m[0m destination_addresses = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m destination_ports     = [
              [32m+[0m[0m "53",
            ]
          [32m+[0m[0m name                  = "allow network"
          [32m+[0m[0m protocols             = [
              [32m+[0m[0m "UDP",
            ]
          [32m+[0m[0m source_addresses      = [
              [32m+[0m[0m "*",
            ]
        }
    }

[1m  # module.firewall.azurerm_firewall_network_rule_collection.servicetags[0m will be created
[0m  [32m+[0m[0m resource "azurerm_firewall_network_rule_collection" "servicetags" {
      [32m+[0m[0m action              = "Allow"
      [32m+[0m[0m azure_firewall_name = "kubenetfw"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "servicetags"
      [32m+[0m[0m priority            = 110
      [32m+[0m[0m resource_group_name = "networks"

      [32m+[0m[0m rule {
          [32m+[0m[0m description           = "allow service tags"
          [32m+[0m[0m destination_addresses = [
              [32m+[0m[0m "AzureContainerRegistry",
              [32m+[0m[0m "MicrosoftContainerRegistry",
              [32m+[0m[0m "AzureActiveDirectory",
            ]
          [32m+[0m[0m destination_ports     = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m name                  = "allow service tags"
          [32m+[0m[0m protocols             = [
              [32m+[0m[0m "Any",
            ]
          [32m+[0m[0m source_addresses      = [
              [32m+[0m[0m "*",
            ]
        }
    }

[1m  # module.firewall.azurerm_firewall_network_rule_collection.time[0m will be created
[0m  [32m+[0m[0m resource "azurerm_firewall_network_rule_collection" "time" {
      [32m+[0m[0m action              = "Allow"
      [32m+[0m[0m azure_firewall_name = "kubenetfw"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "time"
      [32m+[0m[0m priority            = 101
      [32m+[0m[0m resource_group_name = "networks"

      [32m+[0m[0m rule {
          [32m+[0m[0m description           = "aks node time sync rule"
          [32m+[0m[0m destination_addresses = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m destination_ports     = [
              [32m+[0m[0m "123",
            ]
          [32m+[0m[0m name                  = "allow network"
          [32m+[0m[0m protocols             = [
              [32m+[0m[0m "UDP",
            ]
          [32m+[0m[0m source_addresses      = [
              [32m+[0m[0m "*",
            ]
        }
    }

[1m  # module.firewall.azurerm_public_ip.pip[0m will be created
[0m  [32m+[0m[0m resource "azurerm_public_ip" "pip" {
      [32m+[0m[0m allocation_method       = "Static"
      [32m+[0m[0m ddos_protection_mode    = "VirtualNetworkInherited"
      [32m+[0m[0m fqdn                    = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m idle_timeout_in_minutes = 4
      [32m+[0m[0m ip_address              = (known after apply)
      [32m+[0m[0m ip_version              = "IPv4"
      [32m+[0m[0m location                = "westeurope"
      [32m+[0m[0m name                    = "azureFirewalls-ip"
      [32m+[0m[0m resource_group_name     = "networks"
      [32m+[0m[0m sku                     = "Standard"
      [32m+[0m[0m sku_tier                = "Regional"
    }

[1m  # module.hub_network.azurerm_subnet.subnet["AzureFirewallSubnet"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "subnet" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.0.0.0/24",
        ]
      [32m+[0m[0m default_outbound_access_enabled                = true
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "AzureFirewallSubnet"
      [32m+[0m[0m private_endpoint_network_policies              = (known after apply)
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = "networks"
      [32m+[0m[0m virtual_network_name                           = "hub1-firewalvnet"
    }

[1m  # module.hub_network.azurerm_subnet.subnet["jumpbox-subnet"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "subnet" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.0.1.0/24",
        ]
      [32m+[0m[0m default_outbound_access_enabled                = true
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "jumpbox-subnet"
      [32m+[0m[0m private_endpoint_network_policies              = (known after apply)
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = "networks"
      [32m+[0m[0m virtual_network_name                           = "hub1-firewalvnet"
    }

[1m  # module.hub_network.azurerm_virtual_network.vnet[0m will be created
[0m  [32m+[0m[0m resource "azurerm_virtual_network" "vnet" {
      [32m+[0m[0m address_space       = [
          [32m+[0m[0m "10.0.0.0/22",
        ]
      [32m+[0m[0m dns_servers         = (known after apply)
      [32m+[0m[0m guid                = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m location            = "westeurope"
      [32m+[0m[0m name                = "hub1-firewalvnet"
      [32m+[0m[0m resource_group_name = "networks"
      [32m+[0m[0m subnet              = (known after apply)
    }

[1m  # module.jumpbox.azurerm_linux_virtual_machine.jumpbox[0m will be created
[0m  [32m+[0m[0m resource "azurerm_linux_virtual_machine" "jumpbox" {
      [32m+[0m[0m admin_username                                         = "azureuser"
      [32m+[0m[0m allow_extension_operations                             = true
      [32m+[0m[0m bypass_platform_safety_checks_on_user_schedule_enabled = false
      [32m+[0m[0m computer_name                                          = "jumpboxvm"
      [32m+[0m[0m disable_password_authentication                        = true
      [32m+[0m[0m disk_controller_type                                   = (known after apply)
      [32m+[0m[0m extensions_time_budget                                 = "PT1H30M"
      [32m+[0m[0m id                                                     = (known after apply)
      [32m+[0m[0m location                                               = "westeurope"
      [32m+[0m[0m max_bid_price                                          = -1
      [32m+[0m[0m name                                                   = "jumpboxvm"
      [32m+[0m[0m network_interface_ids                                  = (known after apply)
      [32m+[0m[0m patch_assessment_mode                                  = "ImageDefault"
      [32m+[0m[0m patch_mode                                             = "ImageDefault"
      [32m+[0m[0m platform_fault_domain                                  = -1
      [32m+[0m[0m priority                                               = "Regular"
      [32m+[0m[0m private_ip_address                                     = (known after apply)
      [32m+[0m[0m private_ip_addresses                                   = (known after apply)
      [32m+[0m[0m provision_vm_agent                                     = true
      [32m+[0m[0m public_ip_address                                      = (known after apply)
      [32m+[0m[0m public_ip_addresses                                    = (known after apply)
      [32m+[0m[0m resource_group_name                                    = "networks"
      [32m+[0m[0m size                                                   = "Standard_B1ls"
      [32m+[0m[0m virtual_machine_id                                     = (known after apply)
      [32m+[0m[0m vm_agent_platform_updates_enabled                      = false

      [32m+[0m[0m admin_ssh_key {
          [32m+[0m[0m public_key = <<-EOT
                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCwlIlmHeYg1yn/TBh2klSVkXN7VWBQceazckPq/IcXp5hRCUxBU0FqF6wrSQHvNjrkNZD8z7Zzt+jbtiYybA5tDSErGTPVO6YyJVzdp/sxReIMd8CtMtwU4q14Q4VzmJ6Yy6plAPFkIFd7LvFJSLN412y+7urpnSODGQGSqAzW1bApJk4JU3E6rT6uQLeLF/YKruwQWUTquz0JhTsL+WK77Ch/v9TAjc2XLNqxWfS8VpYMIbGa3FuigUtpwDUGJ5O9BYYIQD3g/G3EUircxSGEze/527ow2qrR8qPrcRi6Lcr1OfdHTtsxnQ0ox3yRwVnJcuNaPj32OczhBQx3LIoY/9t08DhCkbzQaFTEsTCbbpN0ZUnTz65jZGBStHsywOJQvjUaVsXa6Pzsdxlu0g+MIyhQRoUs+KoI8JAp1ks5pZOiMOqNHuq40boi2MDHaOFu5ztRHMwoRv181TSg/zPNentnWCLsmu1aa3WI/EO41oR5j+6fdrowhZJW7P3xq30= dev@devops
            EOT
          [32m+[0m[0m username   = "adminuser"
        }

      [32m+[0m[0m os_disk {
          [32m+[0m[0m caching                   = "ReadWrite"
          [32m+[0m[0m disk_size_gb              = (known after apply)
          [32m+[0m[0m name                      = "jumpboxOsDisk"
          [32m+[0m[0m storage_account_type      = "Premium_LRS"
          [32m+[0m[0m write_accelerator_enabled = false
        }

      [32m+[0m[0m source_image_reference {
          [32m+[0m[0m offer     = "UbuntuServer"
          [32m+[0m[0m publisher = "Canonical"
          [32m+[0m[0m sku       = "22_04-lts-gen2"
          [32m+[0m[0m version   = "latest"
        }
    }

[1m  # module.jumpbox.azurerm_network_interface.vm_nic[0m will be created
[0m  [32m+[0m[0m resource "azurerm_network_interface" "vm_nic" {
      [32m+[0m[0m accelerated_networking_enabled = (known after apply)
      [32m+[0m[0m applied_dns_servers            = (known after apply)
      [32m+[0m[0m dns_servers                    = (known after apply)
      [32m+[0m[0m enable_accelerated_networking  = (known after apply)
      [32m+[0m[0m enable_ip_forwarding           = (known after apply)
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m internal_dns_name_label        = (known after apply)
      [32m+[0m[0m internal_domain_name_suffix    = (known after apply)
      [32m+[0m[0m ip_forwarding_enabled          = (known after apply)
      [32m+[0m[0m location                       = "westeurope"
      [32m+[0m[0m mac_address                    = (known after apply)
      [32m+[0m[0m name                           = "vm-nic"
      [32m+[0m[0m private_ip_address             = (known after apply)
      [32m+[0m[0m private_ip_addresses           = (known after apply)
      [32m+[0m[0m resource_group_name            = "networks"
      [32m+[0m[0m virtual_machine_id             = (known after apply)

      [32m+[0m[0m ip_configuration {
          [32m+[0m[0m gateway_load_balancer_frontend_ip_configuration_id = (known after apply)
          [32m+[0m[0m name                                               = "vmNicConfiguration"
          [32m+[0m[0m primary                                            = (known after apply)
          [32m+[0m[0m private_ip_address                                 = (known after apply)
          [32m+[0m[0m private_ip_address_allocation                      = "Dynamic"
          [32m+[0m[0m private_ip_address_version                         = "IPv4"
          [32m+[0m[0m public_ip_address_id                               = (known after apply)
          [32m+[0m[0m subnet_id                                          = (known after apply)
        }
    }

[1m  # module.jumpbox.azurerm_network_interface_security_group_association.sg_association[0m will be created
[0m  [32m+[0m[0m resource "azurerm_network_interface_security_group_association" "sg_association" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m network_interface_id      = (known after apply)
      [32m+[0m[0m network_security_group_id = (known after apply)
    }

[1m  # module.jumpbox.azurerm_network_security_group.vm_sg[0m will be created
[0m  [32m+[0m[0m resource "azurerm_network_security_group" "vm_sg" {
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m location            = "westeurope"
      [32m+[0m[0m name                = "vm-sg"
      [32m+[0m[0m resource_group_name = "networks"
      [32m+[0m[0m security_rule       = [
          [32m+[0m[0m {
              [32m+[0m[0m access                                     = "Allow"
              [32m+[0m[0m destination_address_prefix                 = "*"
              [32m+[0m[0m destination_address_prefixes               = []
              [32m+[0m[0m destination_application_security_group_ids = []
              [32m+[0m[0m destination_port_range                     = "22"
              [32m+[0m[0m destination_port_ranges                    = []
              [32m+[0m[0m direction                                  = "Inbound"
              [32m+[0m[0m name                                       = "SSH"
              [32m+[0m[0m priority                                   = 1001
              [32m+[0m[0m protocol                                   = "Tcp"
              [32m+[0m[0m source_address_prefix                      = "*"
              [32m+[0m[0m source_address_prefixes                    = []
              [32m+[0m[0m source_application_security_group_ids      = []
              [32m+[0m[0m source_port_range                          = "*"
              [32m+[0m[0m source_port_ranges                         = []
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
    }

[1m  # module.jumpbox.azurerm_public_ip.pip[0m will be created
[0m  [32m+[0m[0m resource "azurerm_public_ip" "pip" {
      [32m+[0m[0m allocation_method       = "Dynamic"
      [32m+[0m[0m ddos_protection_mode    = "VirtualNetworkInherited"
      [32m+[0m[0m fqdn                    = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m idle_timeout_in_minutes = 4
      [32m+[0m[0m ip_address              = (known after apply)
      [32m+[0m[0m ip_version              = "IPv4"
      [32m+[0m[0m location                = "westeurope"
      [32m+[0m[0m name                    = "vm-pip"
      [32m+[0m[0m resource_group_name     = "networks"
      [32m+[0m[0m sku                     = "Basic"
      [32m+[0m[0m sku_tier                = "Regional"
    }

[1m  # module.kube_network.azurerm_subnet.subnet["aks-subnet"][0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet" "subnet" {
      [32m+[0m[0m address_prefixes                               = [
          [32m+[0m[0m "10.0.5.0/24",
        ]
      [32m+[0m[0m default_outbound_access_enabled                = true
      [32m+[0m[0m enforce_private_link_endpoint_network_policies = (known after apply)
      [32m+[0m[0m enforce_private_link_service_network_policies  = (known after apply)
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m name                                           = "aks-subnet"
      [32m+[0m[0m private_endpoint_network_policies              = (known after apply)
      [32m+[0m[0m private_endpoint_network_policies_enabled      = (known after apply)
      [32m+[0m[0m private_link_service_network_policies_enabled  = (known after apply)
      [32m+[0m[0m resource_group_name                            = "nopublicipaks"
      [32m+[0m[0m virtual_network_name                           = "spoke1-kubevnet"
    }

[1m  # module.kube_network.azurerm_virtual_network.vnet[0m will be created
[0m  [32m+[0m[0m resource "azurerm_virtual_network" "vnet" {
      [32m+[0m[0m address_space       = [
          [32m+[0m[0m "10.0.4.0/22",
        ]
      [32m+[0m[0m dns_servers         = (known after apply)
      [32m+[0m[0m guid                = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m location            = "westeurope"
      [32m+[0m[0m name                = "spoke1-kubevnet"
      [32m+[0m[0m resource_group_name = "nopublicipaks"
      [32m+[0m[0m subnet              = (known after apply)
    }

[1m  # module.routetable.azurerm_route_table.rt[0m will be created
[0m  [32m+[0m[0m resource "azurerm_route_table" "rt" {
      [32m+[0m[0m disable_bgp_route_propagation = false
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m location                      = "westeurope"
      [32m+[0m[0m name                          = "kubenetfw_fw_rt"
      [32m+[0m[0m resource_group_name           = "networks"
      [32m+[0m[0m route                         = [
          [32m+[0m[0m {
              [32m+[0m[0m address_prefix         = "0.0.0.0/0"
              [32m+[0m[0m name                   = "kubenetfw_fw_r"
              [32m+[0m[0m next_hop_in_ip_address = (known after apply)
              [32m+[0m[0m next_hop_type          = "VirtualAppliance"
            },
        ]
      [32m+[0m[0m subnets                       = (known after apply)
    }

[1m  # module.routetable.azurerm_subnet_route_table_association.aks_subnet_association[0m will be created
[0m  [32m+[0m[0m resource "azurerm_subnet_route_table_association" "aks_subnet_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vnet_peering.azurerm_virtual_network_peering.peering[0m will be created
[0m  [32m+[0m[0m resource "azurerm_virtual_network_peering" "peering" {
      [32m+[0m[0m allow_forwarded_traffic      = false
      [32m+[0m[0m allow_gateway_transit        = false
      [32m+[0m[0m allow_virtual_network_access = true
      [32m+[0m[0m id                           = (known after apply)
      [32m+[0m[0m name                         = "HubToSpoke1"
      [32m+[0m[0m remote_virtual_network_id    = (known after apply)
      [32m+[0m[0m resource_group_name          = "networks"
      [32m+[0m[0m use_remote_gateways          = false
      [32m+[0m[0m virtual_network_name         = "hub1-firewalvnet"
    }

[1m  # module.vnet_peering.azurerm_virtual_network_peering.peering-back[0m will be created
[0m  [32m+[0m[0m resource "azurerm_virtual_network_peering" "peering-back" {
      [32m+[0m[0m allow_forwarded_traffic      = false
      [32m+[0m[0m allow_gateway_transit        = false
      [32m+[0m[0m allow_virtual_network_access = true
      [32m+[0m[0m id                           = (known after apply)
      [32m+[0m[0m name                         = "Spoke1ToHub"
      [32m+[0m[0m remote_virtual_network_id    = (known after apply)
      [32m+[0m[0m resource_group_name          = "nopublicipaks"
      [32m+[0m[0m use_remote_gateways          = false
      [32m+[0m[0m virtual_network_name         = "spoke1-kubevnet"
    }

[1mPlan:[0m 27 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m ssh_command = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
